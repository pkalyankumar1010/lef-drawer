{"version":3,"file":"extension.js","mappings":"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","sources":["../.././src/web/extension.ts","../../external commonjs \"vscode\"","../.././src/parser/lefParser.ts","../../webpack/bootstrap","../../webpack/startup"],"sourcesContent":["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport { parseLef } from '../parser/lefParser'; // Adjust the import path as necessary\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\t// This line of code will only be executed once when your extension is activated\n\tconsole.log('Congratulations, your extension \"lef-viz\" is now active in the web extension host!');\n\n\t// The command has been defined in the package.json file\n\t// Now provide the implementation of the command with registerCommand\n\t// The commandId parameter must match the command field in package.json\n\tconst disposable = vscode.commands.registerCommand('lef-viz.helloWorld', () => {\n\t\t// The code you place here will be executed every time your command is executed\n\n\t\t// Display a message box to the user\n\t\tvscode.window.showInformationMessage('Hello World from lef-viz in a web extension host!');\n\t});\n\n\tcontext.subscriptions.push(disposable);\n  \tconst previewDisposable =     vscode.commands.registerCommand('lef-viz.showPreview', async () => {\n      const editor = vscode.window.activeTextEditor;\n      if (!editor) {\n        vscode.window.showErrorMessage('No LEF file open');\n        return;\n      }\n\n      const panel = vscode.window.createWebviewPanel(\n        'lefPreview',\n        'LEF Preview',\n        vscode.ViewColumn.Beside,\n        {\n          enableScripts: true,\n          localResourceRoots: [vscode.Uri.joinPath(context.extensionUri, 'react-dist')],\n        }\n      );\n\n      // Convert React build assets to webview URIs\n      const jsUri = panel.webview.asWebviewUri(\n        vscode.Uri.joinPath(context.extensionUri, 'react-dist', 'assets', 'index-CKnCRv9t.js')\n      );\n      const cssUri = panel.webview.asWebviewUri(\n        vscode.Uri.joinPath(context.extensionUri, 'react-dist', 'assets', 'index-B2X0Co8W.css')\n      );\n      const viteSvgUri = panel.webview.asWebviewUri(\n        vscode.Uri.joinPath(context.extensionUri, 'react-dist', 'vite.svg')\n      );\n\n\t\t// Convert index.html to webview URI\n\t\tconst indexUri = vscode.Uri.joinPath(context.extensionUri, 'react-dist', 'index.html');\n\t\tconst response = await fetch(indexUri.toString());\n\t\tlet html = await response.text();\n\n\t\t// Inject webview-safe URIs for React build assets\n\t\thtml = html.replace('/assets/index-CKnCRv9t.js', jsUri.toString());\n\t\thtml = html.replace('/assets/index-B2X0Co8W.css', cssUri.toString());\n\t\thtml = html.replace('/vite.svg', viteSvgUri.toString());\n\t\tpanel.webview.html = html;\n\n    const sampleData = [\n      {\n          name: \"M2_M1\",\n          layers: [\n              {\n                  layer: \"Metal1\",\n                  rects: [[-5.2, -0.4, 0.4, 0.4], [-0.4, -0.8, 0.4, 0.8]],\n              },\n              {\n                  layer: \"Via1\",\n                  rects: [[-0.4, -0.4, 0.4, 0.4]],\n              },\n              {\n                  layer: \"Metal2\",\n                  rects: [[-0.8, -0.8, 0.8, 0.2]],\n              },\n          ],\n      },\n      {\n          name: \"M3_M2\",\n          layers: [\n              {\n                  layer: \"Metal2\",\n                  rects: [[-0.2, -0.2, 0.2, 0.2]],\n              },\n              {\n                  layer: \"Via2\",\n                  rects: [[-0.1, -0.1, 0.1, 0.1]],\n              },\n              {\n                  layer: \"Metal3\",\n                  rects: [[-0.2, -0.2, 0.2, 0.2]],\n              },\n          ],\n      },\n      {\n          name: \"Via23_stack_kalyan\",\n          layers: [\n              {\n                  layer: \"Metal2\",\n                  rects: [[-0.2, -0.2, 0.2, 0.3]],\n              },\n              {\n                  layer: \"Via2\",\n                  rects: [[-0.1, -0.1, 0.1, 0.1]],\n              },\n              {\n                  layer: \"Metal3\",\n                  rects: [[-0.2, -0.2, 0.2, 0.2]],\n              },\n          ],\n      }\n  ];\n\n      // Flag to track if webview is ready\n      let webviewReady = false;\n\n      // Handle messages from webview\n      panel.webview.onDidReceiveMessage(\n        message => {\n          console.log('Received message from webview:', message);\n          switch (message.command) {\n            case 'webview-ready':\n              console.log('Webview is ready, sending initial data');\n              webviewReady = true;\n              sendLefToWebview();\n              break;\n            case 'log':\n              console.log('Webview log:', message.text);\n              break;\n            default:\n              console.log('Unknown message from webview:', message);\n              break;\n          }\n        },\n        undefined,\n        context.subscriptions\n      );\n\n      const sendLefToWebview = () => {\n        if (!webviewReady) {\n          console.log('Webview not ready yet, skipping data send');\n          return;\n        }\n        \n        const lefText = editor.document.getText();\n        const parsed = parseLef(lefText);\n        \n        // Send both parsed data and sample data for testing\n        const message = { \n          type: 'lef-data', \n          data: parsed.vias,\n          parsedData: parsed.vias \n        };\n        \n        panel.webview.postMessage(message);\n        console.log('Sent LEF data to webview:', message);\n      };\n\n      // Set up change listener for editor\n      const changeListener = vscode.workspace.onDidChangeTextDocument(e => {\n        if (e.document === editor.document) {\n          console.log('Editor content changed, updating webview');\n          sendLefToWebview();\n        }\n      });\n\n      // Clean up when panel is disposed\n      panel.onDidDispose(() => {\n        changeListener.dispose();\n      }, null, context.subscriptions);\n\n      // Send initial data after a short delay to ensure webview is loaded\n      setTimeout(() => {\n        if (!webviewReady) {\n          console.log('Webview not ready after timeout, sending data anyway');\n          webviewReady = true; // Force ready state\n          sendLefToWebview();\n        }\n      }, 1000);\n\n      // Also send data immediately in case webview is already ready\n      setTimeout(() => {\n        sendLefToWebview();\n      }, 500);\n    });\n\tcontext.subscriptions.push(previewDisposable);\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n","module.exports = require(\"vscode\");","export interface Layer {\n  name: string;\n  type: string;\n  width?: number;\n  spacing?: number;\n}\n\nexport interface ViaLayer {\n  layer: string;\n  rects: number[][];\n}\n\nexport interface Via {\n  name: string;\n  layers: ViaLayer[];\n}\n\nexport interface LefData {\n  layers: Layer[];\n  vias: Via[];\n}\n// Fix Parsing of SAME LAYER RECTs\nexport function parseLef(lefText: string): LefData {\n  // console.log(lefText);\n  const lines = lefText.split(/\\r?\\n/);\n  const layers: Layer[] = [];\n  const vias: Via[] = [];\n\n  let currentLayer: Partial<Layer> = {};\n  let currentVia: Partial<Via> = {};\n  let currentViaRects: ViaLayer[] = [];\n  let inVia = false;\n\n  for (const line of lines) {\n    const trimmed = line.trim();\n    // if (!inVia) {console.log(\"Processing LAYER line:\", trimmed);}\n    // if (inVia) {console.log(\"Processing VIA line:\", trimmed);}\n    if (trimmed.startsWith(\"LAYER\") && !inVia) {\n      currentLayer = { name: trimmed.split(\" \")[1] };\n    } else if (trimmed.startsWith(\"TYPE\") && !inVia) {\n      currentLayer.type = trimmed.split(\" \")[1].replace(\";\", \"\");\n    } else if (trimmed.startsWith(\"WIDTH\") && !inVia) {\n      currentLayer.width = parseFloat(trimmed.split(\" \")[1]);\n    } else if (trimmed.startsWith(\"SPACING\") && !inVia) {\n      currentLayer.spacing = parseFloat(trimmed.split(\" \")[1]);\n    } else if (trimmed.startsWith(\"VIA\")) {\n      currentVia = { name: trimmed.split(\" \")[1] };\n      currentViaRects = [];\n      inVia = true;\n    } else if (inVia && trimmed.startsWith(\"LAYER\")) {\n      // Extract layer name\n      const layerName = trimmed.split(\" \")[1].replace(\";\", \"\");\n      currentViaRects.push({ layer: layerName, rects: [] });\n      // Extract all RECTs on the same line as LAYER\n      const rectMatches = trimmed.match(/RECT\\s+[-+]?\\d*\\.?\\d+(?:\\s+[-+]?\\d*\\.?\\d+){3}/g);\n      if (rectMatches) {\n        for (const rectMatch of rectMatches) {\n          const coords = rectMatch.match(/[-+]?\\d*\\.?\\d+/g);\n          if (coords) {\n            const parsedCoords = coords.map(parseFloat);\n            if (currentViaRects.length > 0) {\n              currentViaRects[currentViaRects.length - 1].rects.push(parsedCoords);\n            }\n          }\n        }\n      }\n    } else if (inVia && trimmed.includes(\"RECT\")) {\n      // Extract all RECTs on this line (whether or not it starts with RECT)\n      const rectMatches = trimmed.match(/RECT\\s+[-+]?\\d*\\.?\\d+(?:\\s+[-+]?\\d*\\.?\\d+){3}/g);\n      if (rectMatches) {\n        for (const rectMatch of rectMatches) {\n          const coords = rectMatch.match(/[-+]?\\d*\\.?\\d+/g);\n          if (coords) {\n            const parsedCoords = coords.map(parseFloat);\n            if (currentViaRects.length > 0) {\n              currentViaRects[currentViaRects.length - 1].rects.push(parsedCoords);\n            }\n          }\n        }\n      }\n    } else if (trimmed.startsWith(\"END\")) {\n      const endName = trimmed.split(\" \")[1];\n      if (!inVia && currentLayer.name === endName) {\n        layers.push(currentLayer as Layer);\n        currentLayer = {};\n      } else if (inVia && currentVia.name === endName) {\n        currentVia.layers = currentViaRects;\n        vias.push(currentVia as Via);\n        currentVia = {};\n        currentViaRects = [];\n        inVia = false;\n      }\n    }\n  }\n  // console.log(\"Parsed layers:\", layers);\n  // console.log(\"Parsed vias:\", vias);\n  return { layers, vias };\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(4);\n"],"names":["context","console","log","disposable","vscode","commands","registerCommand","window","showInformationMessage","subscriptions","push","previewDisposable","async","editor","activeTextEditor","showErrorMessage","panel","createWebviewPanel","ViewColumn","Beside","enableScripts","localResourceRoots","Uri","joinPath","extensionUri","jsUri","webview","asWebviewUri","cssUri","viteSvgUri","indexUri","response","fetch","toString","html","text","replace","webviewReady","onDidReceiveMessage","message","command","sendLefToWebview","undefined","lefText","document","getText","parsed","parseLef","type","data","vias","parsedData","postMessage","changeListener","workspace","onDidChangeTextDocument","e","onDidDispose","dispose","setTimeout","module","exports","require","lines","split","layers","currentLayer","currentVia","currentViaRects","inVia","line","trimmed","trim","startsWith","name","width","parseFloat","spacing","layerName","layer","rects","rectMatches","match","rectMatch","coords","parsedCoords","map","length","includes","endName","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}